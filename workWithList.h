/**
*\file
*\brief
Модуль программы по работе с расписанием.
*\author Данил
*\version 1.0
*\example Сортировка расписания по времени отправления.
*
*Все необходимые функции для обработки расписания.
*/
#ifndef WORKWITHLIST_H
#define WORKWITHLIST_H

#include "pch.h"
#include <string.h>
#include <stdio.h>
///Структура времени с полями: часы, минуты.
struct Time
{
	int hour;
	int minute;
};
///Структура расписания поездов с полями: название конечной станции, время отправления, длительность пути, время прибытия.
struct Train
{
	char name[32];
	Time departure;
	Time way;
	Time arrival;
};
///Структура данных с полями: указатель на расписание, количество элементов расписания.
struct Data
{
	Train* pointer;
	int count;
};
///Переопределение оператора '+' для сложения структур времени.
Time operator+(Time, Time);
/**
*\brief Компаратор для сортировки расписания по названию конечной станции.
* Используется в функции SortName()
*\param[in] Первый элемент расписания
*\param[in] Второй элемент расписания
*\return Истинность того, что элементы должны поменяться местами
*/
bool sortName(Train, Train);
/**
*\brief Компаратор для сортировки расписания по времени отправления.
* Используется в функции SortDepart()
*\param[in] Первый элемент расписания
*\param[in] Второй элемент расписания
*\return Истинность того, что элементы должны поменяться местами
*/
bool sortDepart(Train, Train);
/**
*\brief Компаратор для сортировки расписания по длительности пути.
* Используется в функции SortWay()
*\param[in] Первый элемент расписания
*\param[in] Второй элемент расписания
*\return Истинность того, что элементы должны поменяться местами
*/
bool sortWay(Train, Train);
/**
*\brief Компаратор для сортировки расписания по времени прибытия.
* Используется в функции SortArrival()
*\param[in] Первый элемент расписания
*\param[in] Второй элемент расписания
*\return Истинность того, что элементы должны поменяться местами
*/
bool sortArrival(Train, Train);
/**
*\brief Функция сортирует расписание по названию конечной станции.
* Используется в функции sortList()
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
void SortName(Train*, int);
/**
*\brief Функция сортирует расписание по времени отправления.
* Используется в функции sortList()
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
void SortDepart(Train*, int);
/**
*\brief Функция сортирует расписание по длительности пути.
* Используется в функции sortList()
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
void SortWay(Train*, int);
/**
*\brief Функция сортирует расписание по времени прибытия.
* Используется в функции sortList()
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
void SortArrival(Train*, int);
/**
*\brief Функция заполняет расписание.
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
Data startEnter(Train*, int);
/**
*\brief Функция добавляет новый элемент в расписание.
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
Data addElem(Train*, int);
/**
*\brief Функция сохраняет расписание в файл.
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
void saveList(Train*, int);
/**
*\brief Функция удаляет определенный элемент в расписании.
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
Data deleteElem(Train*, int);
/**
*\brief Функция сортирует расписание по выбранному полю.
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
void sortList(Train*, int);
/**
*\brief Функция выводит расписание на экран.
*\param[in] Указатель на массив расписания
*\param[in] Количество элементов расписания
*/
void outList(Train*, int);

#endif